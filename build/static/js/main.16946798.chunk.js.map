{"version":3,"sources":["constants/constants.js","rootReducer.js","app/home/reducer.js","store.js","components/header/header.js","components/footer/footer.js","components/memeImage/index.js","app/home/actionCreator.js","app/home/actions.js","app/home/home.js","App.js","serviceWorker.js","index.js"],"names":["Types","combineReducers","memeImgReducer","state","memeImgList","saveMemeImgsDetails","isLoading","isError","action","type","payload","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","initialState","Header","className","Footer","MemeImage","props","classProp","imgSrcProp","onLoadProp","memeTextPositionProp","memeTextProp","isImgLoading","src","alt","onLoad","fetchMemeImgList","url","dispatch","Promise","resolve","reject","fetch","then","res","json","data","URL","getMemeImgList","catch","err","saveMemeDetails","saveMemeDetailsAction","connect","useState","search","setSearch","memeText","setMemeText","memeTextPosition","setMemeTextPosition","memeMainImg","setMemeMainImg","savedMemes","setSavedMemes","isMainImgLoading","setIsMainImgLoading","isActive","setIsActive","message","setMessage","onHandleChange","e","callback","target","value","name","useEffect","openSnackBar","msg","setTimeout","onSubmit","preventDefault","response","memeImgs","images","length","Math","floor","random","onChange","placeholder","map","meme","index","id","key","checked","htmlFor","onClick","App","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","error","ReactDOM","render","store","createStore","rootReducer","applyMiddleware","thunk","document","getElementById","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.16946798.chunk.js","sourcesContent":["export const BASE_SEARCH_URL_WITH_QUERY = ' http://www.splashbase.co/api/v1/images/search?query='\nexport const NO_DATA_AVAILABLE = 'No Data Available'\nexport const ERROR_MESSAGE = 'There seems to be some error! Please try again after sometime'\nexport const START_GENERATING_MEMES = \"So Let's start generating Memes shall we!\"\nexport const LOADING_IMAGE_BASE64 =\n  ''\n\n/**\n * action types\n */\nexport const Types = {\n  MEME_IMAGE_LIST: 'MEME_IMAGE_LIST',\n  MEME_IMAGE_LIST_LOADING: 'MEME_IMAGE_LIST_LOADING',\n  MEME_IMAGE_LIST_FAILURE: 'MEME_IMAGE_LIST_FAILURE',\n  SAVE_MEME_DETAILS: 'SAVE_MEME_DETAILS'\n}\n","import { combineReducers } from 'redux'\nimport memeImgReducer from './app/home/reducer'\n\nexport default combineReducers({\n  memeImgReducer\n})\n","import { Types } from '../../constants/constants'\n\nexport default (\n  state = {\n    memeImgList: [],\n    saveMemeImgsDetails: [],\n    isLoading: false,\n    isError: false\n  },\n  action\n) => {\n  switch (action.type) {\n    case Types.MEME_IMAGE_LIST:\n      return {\n        ...state,\n        memeImgList: action.payload,\n        isLoading: false,\n        isError: false\n      }\n    case Types.MEME_IMAGE_LIST_LOADING:\n      return {\n        ...state,\n        isLoading: true,\n        isError: false\n      }\n    case Types.MEME_IMAGE_LIST_FAILURE:\n      return {\n        ...state,\n        isLoading: false,\n        isError: true\n      }\n    case Types.SAVE_MEME_DETAILS:\n      return {\n        ...state,\n        saveMemeImgsDetails: action.payload,\n        isLoading: false,\n        isError: false\n      }\n    default:\n      return state\n  }\n}\n","import { createStore, applyMiddleware, compose } from 'redux'\nimport thunk from 'redux-thunk'\nimport rootReducer from './rootReducer'\n\nconst composeEnhancers =\n  (typeof window !== 'undefined' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) || compose\n\nconst initialState = {}\n\nexport default function configureStore() {\n  return createStore(rootReducer, initialState, composeEnhancers(applyMiddleware(thunk)))\n}\n","import React from 'react'\n\nfunction Header() {\n  return (\n    <header className=\"meme-header\">\n      <h2>MemeX</h2>\n    </header>\n  )\n}\n\nexport default Header\n","import React from 'react'\n\nfunction Footer() {\n  return (\n    <footer className=\"meme-footer\">\n      <h2>MemeX footer!</h2>\n    </footer>\n  )\n}\n\nexport default Footer\n","import React from 'react'\n\nfunction MemeImage(props) {\n  const {\n    classProp,\n    imgSrcProp,\n    onLoadProp,\n    memeTextPositionProp,\n    memeTextProp,\n    isImgLoading\n  } = props\n\n  return (\n    <>\n      <img className={classProp} src={imgSrcProp} alt=\"Loading\" onLoad={onLoadProp} />\n      <div\n        className={`${\n          memeTextPositionProp ? `flex-row--align-v-${memeTextPositionProp} ` : ``\n        }meme-text`}\n      >\n        {!isImgLoading ? memeTextProp : ''}\n      </div>\n    </>\n  )\n}\n\nexport default MemeImage\n","import 'cross-fetch/polyfill'\nimport { getMemeImgList, loadingMeme, failureMeme, saveMemeDetailsAction } from './actions'\n\nexport function fetchMemeImgList(url) {\n  return (dispatch) => {\n    const promVal = new Promise((resolve, reject) => {\n      dispatch(loadingMeme())\n      fetch(url)\n        .then((res) => res.json())\n        .then((data) => {\n          resolve(data)\n          dispatch(getMemeImgList(data))\n        })\n        .catch((err) => {\n          reject(err)\n          dispatch(failureMeme())\n        })\n    })\n    return promVal\n  }\n}\n\nexport function saveMemeDetails(data) {\n  return (dispatch) => {\n    dispatch(saveMemeDetailsAction(data))\n  }\n}\n","import { Types } from '../../constants/constants'\n\nexport const getMemeImgList = (URL) => ({\n  type: Types.MEME_IMAGE_LIST,\n  payload: URL\n})\n\nexport const loadingMeme = () => ({\n  type: Types.MEME_IMAGE_LIST_LOADING\n})\n\nexport const failureMeme = () => ({\n  type: Types.MEME_IMAGE_LIST_FAILURE\n})\n\nexport const saveMemeDetailsAction = (data) => ({\n  type: Types.SAVE_MEME_DETAILS,\n  payload: data\n})\n","import React, { useState, useEffect } from 'react'\nimport { connect } from 'react-redux'\n\nimport {\n  BASE_SEARCH_URL_WITH_QUERY,\n  NO_DATA_AVAILABLE,\n  ERROR_MESSAGE,\n  START_GENERATING_MEMES,\n  LOADING_IMAGE_BASE64\n} from '../../constants/constants'\nimport MemeImage from '../../components/memeImage'\nimport { fetchMemeImgList, saveMemeDetails } from './actionCreator'\n\nimport './home.scss'\nimport '../../assets/styles/snackbar.scss'\n\nfunction Home(props) {\n  const [search, setSearch] = useState('')\n  const [memeText, setMemeText] = useState('')\n  const [memeTextPosition, setMemeTextPosition] = useState('')\n  const [memeMainImg, setMemeMainImg] = useState('')\n  const [savedMemes, setSavedMemes] = useState([])\n  const {\n    memeImgReducer: { saveMemeImgsDetails, isLoading, isError }\n  } = props\n  const [isMainImgLoading, setIsMainImgLoading] = useState(true)\n  const [isActive, setIsActive] = useState(false)\n  const [message, setMessage] = useState('')\n\n  useEffect(() => {\n    setSavedMemes(saveMemeImgsDetails)\n  }, [saveMemeImgsDetails])\n\n  function onHandleChange(e, callback) {\n    callback(e.target.value)\n    if (e.target.name === 'search') {\n      setMemeMainImg('')\n    }\n  }\n  const openSnackBar = (msg) => {\n    setMessage(msg)\n    setIsActive(true)\n    setTimeout(() => {\n      setIsActive(false)\n      setMessage('')\n    }, 3000)\n  }\n\n  function onHandleSearch(e) {\n    e.preventDefault()\n    if (search !== '') {\n      setIsMainImgLoading(true)\n      setMemeMainImg('')\n      props\n        .dispatch(fetchMemeImgList(BASE_SEARCH_URL_WITH_QUERY + search))\n        .then((response) => {\n          const memeImgs = response.images\n          if (memeImgs.length > 0) {\n            setMemeMainImg(() => {\n              return memeImgs[Math.floor(Math.random() * memeImgs.length)]\n            })\n          } else {\n            setMemeMainImg('NO_DATA')\n          }\n        })\n        .catch(() => {\n          setIsMainImgLoading(false)\n          openSnackBar('There has been some error!')\n        })\n    }\n  }\n\n  const onHandleSave = () => {\n    if (search === '') {\n      openSnackBar('Please have a meme before saving')\n      return\n    }\n    if (memeText === '') {\n      openSnackBar('Enter a Meme text for a meme!')\n      return\n    }\n    if (memeTextPosition === '') {\n      openSnackBar('Please select meme position for the text to align in!')\n      return\n    }\n    if (memeMainImg !== '' && memeText !== '' && memeTextPosition !== '') {\n      props.dispatch(\n        saveMemeDetails([...saveMemeImgsDetails, { ...memeMainImg, memeText, memeTextPosition }])\n      )\n    }\n  }\n\n  const onHandleReset = () => {\n    setSearch('')\n    setMemeMainImg('')\n    setMemeText('')\n    setMemeTextPosition('')\n  }\n\n  return (\n    <main className=\"main-container \">\n      <form className=\"flex-row\" onSubmit={onHandleSearch}>\n        <input\n          className=\"flex-col-xs-9 flex-col-sm-9 flex-col-md-9 flex-col-lg-9 meme-input-text\"\n          name=\"search\"\n          type=\"text\"\n          value={search}\n          onChange={(e) => onHandleChange(e, setSearch)}\n          placeholder=\"Search image\"\n        />\n        <div\n          className=\"flex-col-lg-3 flex-col-md-3 flex-col-sm-3 flex-col-xs-3 \n        padding-top-0 padding-bottom-0\"\n        >\n          <button className=\"meme-btn\" type=\"submit\">\n            Search\n          </button>\n        </div>\n      </form>\n      <section className=\"flex-row left-side\">\n        <div\n          className=\"img-view flex-col-lg-9 flex-col-md-9 \n        flex-col-sm-12 flex-col-xs-12 flex-row\"\n        >\n          <div\n            className=\"flex-col-xs-12 flex-row--align-h-center \n          flex-row--align-v-center meme-main flex-row\"\n          >\n            {memeMainImg && memeMainImg !== 'NO_DATA' && (\n              <MemeImage\n                classProp=\"main-img\"\n                imgSrcProp={\n                  !isMainImgLoading\n                    ? memeMainImg.url\n                    : `data:image/gif;base64,${LOADING_IMAGE_BASE64}`\n                }\n                onLoadProp={() => setIsMainImgLoading(false)}\n                memeTextPositionProp={memeTextPosition}\n                memeTextProp={memeText}\n                isImgLoading={isMainImgLoading}\n              />\n            )}\n            {search === '' && memeMainImg === '' && (\n              <>\n                <h3 className=\"no-data\">{START_GENERATING_MEMES}</h3>\n              </>\n            )}\n            {memeMainImg === 'NO_DATA' && (\n              <>\n                <div>\n                  {NO_DATA_AVAILABLE}\n                  {' '}\n                  for\n                  <h4 className=\"disp-inline\">{` ${search}`}</h4>\n                  {' '}\n                  available\n                </div>\n              </>\n            )}\n            {isError && (\n              <>\n                <div className=\"no-data\">{ERROR_MESSAGE}</div>\n              </>\n            )}\n          </div>\n\n          <textarea\n            className=\"flex-col-xs-12 meme-input-text meme-display-text\"\n            name=\"memeText\"\n            value={memeText}\n            onChange={(e) => onHandleChange(e, setMemeText)}\n            placeholder=\"Please Enter Meme text here!\"\n          />\n        </div>\n        <aside\n          className=\"flex-col-lg-3 flex-col-md-3 \n        flex-col-sm-12 flex-col-xs-12 right-side flex-row\"\n        >\n          <div className=\"saved-memes-list flex-row divide-50\">\n            <h3 className=\"flex-col-xs-12 saved-memes-head\">Saved Memes</h3>\n            <div className=\"scroll-y flex-row \">\n              {savedMemes.length > 0 &&\n                savedMemes.map((meme, index) => {\n                  const id = meme.id + index\n                  return (\n                    <div\n                      className=\"saved-memes-card flex-col-xs-6 \n                      flex-row--align-h-center flex-row--align-v-center\"\n                      key={id}\n                    >\n                      <MemeImage\n                        classProp=\"saved-meme\"\n                        imgSrcProp={meme.url}\n                        onLoadProp={() => {}}\n                        memeTextPositionProp={meme.memeTextPosition}\n                        memeTextProp={meme.memeText}\n                      />\n                    </div>\n                  )\n                })}\n              {savedMemes.length === 0 && <div className=\"no-data\">No Memes Saved.</div>}\n            </div>\n          </div>\n\n          <div className=\"divide-50\">\n            <div>Position :</div>\n            <input\n              id=\"top\"\n              name=\"memeTextPosition\"\n              checked={memeTextPosition === 'top'}\n              type=\"radio\"\n              onChange={(e) => onHandleChange(e, setMemeTextPosition)}\n              value=\"top\"\n            />\n            <label htmlFor=\"top\">Top</label>\n            <input\n              id=\"center\"\n              name=\"memeTextPosition\"\n              checked={memeTextPosition === 'center'}\n              type=\"radio\"\n              onChange={(e) => onHandleChange(e, setMemeTextPosition)}\n              value=\"center\"\n            />\n            <label htmlFor=\"center\"> Center</label>\n            <input\n              id=\"bottom\"\n              name=\"memeTextPosition\"\n              checked={memeTextPosition === 'bottom'}\n              type=\"radio\"\n              onChange={(e) => onHandleChange(e, setMemeTextPosition)}\n              value=\"bottom\"\n            />\n            <label htmlFor=\"bottom\"> Bottom</label>\n            <div className=\"flex-row\">\n              <button\n                type=\"button\"\n                className=\"flex-col-sm-5 flex-col-xs-12 meme-btn\"\n                onClick={onHandleSave}\n              >\n                Save\n              </button>\n              <button\n                type=\"button\"\n                className=\"flex-col-sm-5 flex-col-xs-12 meme-btn meme-btn--default\"\n                onClick={onHandleReset}\n              >\n                Reset\n              </button>\n            </div>\n          </div>\n        </aside>\n      </section>\n      {isLoading && (\n        <div className=\"back-drop flex-row flex-row--align-h-center flex-row--align-v-center\">\n          <div className=\"loader\" />\n        </div>\n      )}\n      {<div className={isActive ? 'snackbar show' : 'snackbar'}>{message}</div>}\n    </main>\n  )\n}\n\nfunction mapStateToProps(state) {\n  const { memeImgReducer } = state\n  return { memeImgReducer }\n}\n\nexport default connect(mapStateToProps)(Home)\n","import React from 'react'\n\nimport Header from './components/header/header'\nimport Footer from './components/footer/footer'\nimport Home from './app/home/home'\nimport './App.scss'\nimport './assets/styles/flex.scss'\n\nfunction App() {\n  return (\n    <div className=\"app-container\">\n      <Header />\n      <Home />\n      <Footer />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.')\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport configureStore from './store'\n\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <Provider store={configureStore()}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register()\n"],"sourceRoot":""}